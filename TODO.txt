min = a.iter().reduce(min).unwrap();
impl sums and prods using scan

====

graph remove node
graph merge nodes
    (transfer edges to selected node)
    (use set_edge_source_node, set_edge_target_node, remove_edge)
graph find cycles

Остовное дерево:
https://ru.wikipedia.org/wiki/Алгоритм_Краскала


quick hash:
use core::convert::TryFrom;
use core::fmt::Debug;
use core::ops::{Add, Mul, Rem, Sub};
pub trait T32 {
    type Type;
}

macro_rules! impl_ops {
    ($t32:ty, $($type:tt)*) => {
        $(
            impl T32 for $type {
                type Type = $t32;
            }
        )*
    };
}

impl_ops!(u32, u8 u16 u32 usize);
impl_ops!(i32, i8 i16 i32 isize);

/*impl<T, U> QuickHash for T
where
    T: T32<Type = U> + TryFrom<U>,
    T::Error: Debug,
    U: Clone + From<T> + From<u32>,
    U: Mul<Output = U> + Sub<Output = U> + Rem<Output = U> + Add<Output = U>,
{
    fn hash<R>(self, range: R) -> Self
    where
        R: RangeStart<Self> + RangeEnd<Self>,
    {
        let start = U::from(range.start_inclusive());
        let end = U::from(range.end_exclusive());

        let delta = end - start.clone();
        T::try_from((U::from(self) * U::from(2654435761u32)) % delta + start).unwrap()
    }
}*/
